{
  "name": "github-scraper",
  "version": "3.0.21",
  "description": "insert imaginative description here",
  "main": "lib/index.js",
  "scripts": {
    "dev": "nodemon test/followers.js",
    "quick": "./node_modules/tape/bin/tape ./test/*.js",
    "test": "istanbul cover ./node_modules/tape/bin/tape ./test/*.js | node_modules/tap-spec/bin/cmd.js",
    "coverage": "istanbul cover ./node_modules/tape/bin/tape ./test/*.js && istanbul check-coverage --statements 100 --functions 100 --lines 100 --branches 100",
    "codeclimate": "CODECLIMATE_REPO_TOKEN=d76761e65db40196c610696b451975d738be69a40438ae9fec3a5a3113af799f ./node_modules/codeclimate-test-reporter/bin/codeclimate.js < ./coverage/lcov.info",
    "jshint": "jshint -c .jshintrc --exclude-path .gitignore .",
    "codestyle": "jscs -p google src/ test/"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nelsonic/github-scraper.git"
  },
  "author": {
    "name": "nelsonic",
    "email": "nodecoder@gmail.com",
    "url": "https://github.com/nelsonic"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/nelsonic/github-scraper/issues"
  },
  "homepage": "https://github.com/nelsonic/github-scraper",
  "engines": {
    "node": ">= 0.12"
  },
  "dependencies": {
    "chalk": "^1.1.0",
    "cheerio": "^0.19.0",
    "wreck": "^6.1.0",
    "xml2js": "^0.4.9"
  },
  "devDependencies": {
    "codeclimate-test-reporter": "0.1.0",
    "istanbul": "^0.3.17",
    "jshint": "^2.8.0",
    "pre-commit": "1.0.10",
    "tap-spec": "^4.0.2",
    "tape": "^4.0.1"
  },
  "pre-commit": [
    "jshint",
    "coverage",
    "codeclimate"
  ],
  "readme": "# GitHub Scraper\n\n[![Build Status](https://travis-ci.org/nelsonic/github-scraper.png?branch=master)](https://travis-ci.org/nelsonic/github-scraper)\n[![Test Coverage](https://codeclimate.com/github/nelsonic/github-scraper/badges/coverage.svg)](https://codeclimate.com/github/nelsonic/github-scraper/coverage)\n[![Code Climate](https://codeclimate.com/github/nelsonic/github-scraper.png)](https://codeclimate.com/github/nelsonic/github-scraper)\n[![Dependencies](https://david-dm.org/nelsonic/github-scraper.png?theme=shields.io)](https://david-dm.org/nelsonic/github-scraper)\n[![devDependency Status](https://david-dm.org/nelsonic/github-scraper/dev-status.svg)](https://david-dm.org/nelsonic/github-scraper#info=devDependencies)\n<!-- [![NPM version](https://badge.fury.io/js/fuata.png)](https://npmjs.org/package/fuata) -->\n\n## Why?\n\nOur _initial reason_ for writing this set of scrapers was to satisfy the _curiosity_ / _question_:\n> _How_ can we ***discover*** which are the ***interesting people and projects\non GitHub***  \n(_without **manually** checking *dozens* of GitHub profiles/repositories each day_) ?\n\nOur _second reason_ for scraping data from GitHub is so that we can show people a \"*summary view*\" of all their issues in our [Tudo](https://github.com/dwyl/tudo) project (which helps people track/manage/organise/prioritise their GitHub issues).\nSee: https://github.com/dwyl/tudo/issues/51\n\nWe needed a _simple_ way of systematically getting data from GitHub (_before people authenticate_) and scraping is the only way we could think of.\n\nWe _tried_ using the [GitHub ***API***](https://developer.github.com/v3/)\nto get records from GitHub, but sadly,\nit has quite a few limitations (see: \"_Issues with GitHub API_\" section below) the biggest limitation being the [_rate-limiting_](https://developer.github.com/v3/#rate-limiting) on API requests.\n\nThirdly we're building this project to [***scratch our own itch***](https://gettingreal.37signals.com/ch02_Whats_Your_Problem.php)  \n... scraping the _pages_ of GitHub has given us a _unique_ insight into the features of the platform which has leveled-up our skills.\n\n> Don't *you* want to know ***what's \"Hot\" right now on GitHub***...?\n\n\n## What (*Problem* are we _trying_ to Solve)?\n\nHaving a way of extracting the *essential* data from GitHub\nis a solution to a _surprisingly **wide array of problems**_, here are a few:\n\n+ ***Who*** are the up-and-comming people (_worth following_) on GitHub?\n+ ***Which*** are the ***interesting projects*** (*and why?!*)\n+ ***What*** is the average age of an issue for a project?\n+ Is a project's ***popularity growing*** or *plateaued*?\n+ Are there (_already_) any ***similar projects*** to what I'm trying to build? (_reduce duplication of effort which is rampant in Open Source!!_)\n+ How many projects get started but never finished?\n+ ***Will*** my **Pull Request** *ever* get *merged* or is the module maintainer *too busy* and did I just [***waste 3 hours***](https://twitter.com/nelsonic/status/621984170353524736)?\n+ _insert **your idea/problem** here_ ...\n+ **Associative Lists** e.g: People who starred `abc` also liked `xyz`\n\n\n# How?\n\nThis module fetches (_public_) pages from GitHub, \"[_scrapes_](https://en.wikipedia.org/wiki/Web_scraping)\" the html to extract raw data and returns a JSON Object.\n\n# Usage\n\n## install from NPM\n\ninstal from npm and save to your `package.json`:\n\n```sh\nnpm install github-scraper --save\n```\n\n## Use it in your script!\n\n```js\nvar gs = require('github-scraper');\nvar url = '/iteles' // a random username\nswitcher(url, function(err, data) {\n  console.log(data); // or what ever you want to do with the data\n})\n```\n\n### Sample Output for Profile Page\n\nUsing the scraper in the way described above (to scrape a user profile)\nwill yield the following results\n\n```js\n{\n  url: 'https://github.com/iteles'\n  website: 'http://www.twitter.com/iteles',\n  followercount: 45,\n  starred: 88,\n  followingcount: 32,\n  worksfor: 'dwyl.io',\n  location: 'London, UK',\n  fullname: 'Ines Teles',\n  email: '',\n  joined: '2013-04-17T21:10:06Z',\n  avatar: 'https://avatars1.githubusercontent.com/u/4185328?v=3&s=460',\n  contribs: 824,\n  longest: 156,\n  current: 156,\n  lastupdated: 1438751565678,\n  orgs:\n   [ '/ladieswhocode https://avatars1.githubusercontent.com/u/1634620?v=3&s=84',\n     '/bowlingjs https://avatars3.githubusercontent.com/u/8825909?v=3&s=84',\n     '/foundersandcoders https://avatars3.githubusercontent.com/u/9970257?v=3&s=84',\n     '/docdis https://avatars0.githubusercontent.com/u/10836426?v=3&s=84',\n     '/dwyl https://avatars2.githubusercontent.com/u/11708465?v=3&s=84' ]\n}\n```\n\n## Example URLs and Output\n\n### Profile Page\n\nUser profile has the following format `https://github.com/{username}`  \nexample: [https://github.com/**alanshaw**](https://github.com/alanshaw)\n\n```js\nvar gs = require('github-scraper'); // require the module\nvar url = 'alanshaw' // a random username (of someone you should follow!)\ngs(url, function(err, data) {\n  console.log(data); // or what ever you want to do with the data\n})\n```\n\nSample output:\n\n```js\n{\n  entries: [],\n  url: 'https://github.com/alanshaw',\n  followercount: 161,\n  starred: 243,\n  followingcount: 19,\n  worksfor: 'TABLEFLIP',\n  location: 'London',\n  fullname: 'Alan Shaw',\n  email: '',\n  website: 'http://tableflip.io/',\n  joined: '2009-11-13T14:39:19Z',\n  avatar: 'https://avatars3.githubusercontent.com/u/152863?v=3&s=460',\n  contribs: 1030,\n  longest: 11,\n  current: 2,\n  lastupdated: 1438723919828,\n  orgs:\n   [ '/lnug https://avatars2.githubusercontent.com/u/4046959?v=3&s=84',\n     '/polestarglobal https://avatars0.githubusercontent.com/u/4190361?v=3&s=84',\n     '/nodesecurity https://avatars3.githubusercontent.com/u/4229593?v=3&s=84',\n     '/require-lx https://avatars3.githubusercontent.com/u/4672751?v=3&s=84',\n     '/tableflip https://avatars3.githubusercontent.com/u/5347145?v=3&s=84',\n     '/LXJS https://avatars2.githubusercontent.com/u/6461627?v=3&s=84',\n     '/nexttick https://avatars1.githubusercontent.com/u/6919683?v=3&s=84',\n     '/yldio https://avatars3.githubusercontent.com/u/6999859?v=3&s=84',\n     '/driift https://avatars1.githubusercontent.com/u/7840567?v=3&s=84',\n     '/meteor-london https://avatars3.githubusercontent.com/u/7863151?v=3&s=84',\n     '/dimsumjs https://avatars0.githubusercontent.com/u/8371806?v=3&s=84',\n     '/docdis https://avatars0.githubusercontent.com/u/10836426?v=3&s=84',\n     '/librariesio https://avatars2.githubusercontent.com/u/11243589?v=3&s=84',\n     '/dwyl https://avatars2.githubusercontent.com/u/11708465?v=3&s=84',\n     '/kittorrent https://avatars0.githubusercontent.com/u/13317556?v=3&s=84' ],\n  developerprogram: true\n}\n```\n### Followers\n\nHow many people are following a given person on Github.\nUrl format: `https://github.com/{username}/followers`  \nexample: [https://github.com/iteles/**followers**](https://github.com/iteles/followers)\n\n```js\nvar gs = require('github-scraper'); // require the module\nvar url = 'iteles/followers' // a random username (of someone you should follow!)\ngs(url, function(err, data) {\n  console.log(data); // or what ever you want to do with the data\n})\n```\n\nSample output:\n\n```js\n{ entries:\n   [ 'tunnckoCore', 'OguzhanE', 'minaorangina', 'Jasonspd', 'muntasirsyed', 'fmoliveira', 'nofootnotes',\n    'SimonLab', 'Danwhy', 'kbocz', 'cusspvz', 'RabeaGleissner', 'beejhuff', 'heron2014', 'joshpitzalis',\n    'rub1e', 'nikhilaravi', 'msmichellegar', 'anthonybrown', 'miglen', 'shterev', 'NataliaLKB',\n    'ricardofbarros', 'boymanjor', 'asimjaved', 'amilvasishtha', 'Subhan786', 'Neats29', 'lottie-em',\n    'rorysedgwick', 'izaakrogan', 'oluoluoxenfree', 'markwilliamfirth', 'bmordan', 'nodeco', 'besarthoxhaj',\n    'FilWisher', 'maryams', 'sofer', 'joaquimserafim', 'vs4vijay', 'intool', 'edwardcodes', 'hyprstack',\n    'nelsonic' ],\n  url: 'https://github.com/iteles/followers' }\nok 1 iteles/followers count: 45\n```\n\nIf the person has ***more than 51 followers*** they will have multiple pages of followers.\nThe data will have a **next_page** key with a value such as:\n[/nelsonic/followers?**page=2**](https://github.com/nelsonic/followers?page=2)\nIf you want to keep fetching these subsequent pages of followers,\nsimply keep running the scraper:\ne.g:\n\n```js\nvar url = 'alanshaw/followers' // a random username (of someone you should follow!)\ngs(url, function(err, data) {\n  console.log(data); // or what ever you want to do with the data\n  if(data.next_page) {\n    gs(data.next_page, function(err2, data2)) {\n      console.log(data2); // etc.\n    }\n  }\n})\n```\n\n### **Following**\nWant to know the list of people this person is `following` that's *easy* too!\nThe url format is: `https://github.com/{username}/following`\ne.g: [https://github.com/iteles/**following**](https://github.com/iteles/following) or\n[https://github.com/nelsonic/following?**page=2**](https://github.com/nelsonic/following?page=2)\n(_where the person is following more than 51 people_ ...)\n\nUsage format is *identical* to `followers` (above) so here's an example\nof fetching page 3 of the results:\n\n```js\nvar gs = require('github-scraper'); // require the module\nvar url = 'nelsonic/following?page=3' // a random dude\ngs(url, function(err, data) {\n  console.log(data); // or what ever you want to do with the data\n})\n```\n\nSample output:\n\n```js\n{\n  entries:\n   [ 'kytwb', 'dexda', 'arrival', 'jinnjuice', 'slattery', 'unixarcade', 'a-c-m', 'krosti',\n   'simonmcmanus', 'jupiter', 'capaj', 'cowenld', 'FilWisher', 'tsop14', 'NataliaLKB',\n   'izaakrogan', 'lynnaloo', 'nvcexploder', 'cwaring', 'missinglink', 'alanshaw', 'olizilla',\n   'tancredi', 'Ericat', 'pgte' 'hyprstack', 'iteles' ],\n  url: 'https://github.com/nelsonic/following?page=3',\n  next_page: 'https://github.com/nelsonic/following?page=4'\n}\n```\n\n### Starred Repositories\n\nThe list of projects a person has *starred* a fascinating source of insight.\nurl format: https://github.com/stars/{username}\ne.g: [/stars/iteles](https://github.com/stars/iteles)\n\n```js\nvar gs = require('github-scraper'); // require the module\nvar url = 'stars/iteles';           // starred repos for this user\ngs(url, function(err, data) {\n  console.log(data);                // or what ever you want to do with the data\n})\n```\n\nSample output:\n\n```js\n{\n  entries:\n   [ '/dwyl/repo-badges', '/nelsonic/learn-testling', '/joshpitzalis/testing', '/gmarena/gmarena.github.io',\n    '/dwyl/alc', '/nikhilaravi/fac5-frontend', '/foundersandcoders/dossier', '/nelsonic/health', '/dwyl/alvo',\n    '/marmelab/gremlins.js', '/docdis/learn-saucelabs', '/rogerdudler/git-guide', '/tableflip/guvnor',\n    '/dwyl/learn-redis', '/foundersandcoders/playbook', '/MIJOTHY/FOR_FLUX_SAKE', '/NataliaLKB/learn-git-basics',\n    '/nelsonic/liso', '/dwyl/learn-json-web-tokens', '/dwyl/hapi-auth-jwt2', '/dwyl/start-here',\n    '/arvida/emoji-cheat-sheet.com', '/dwyl/time', '/docdis/learn-react', '/dwyl/esta', '/alanshaw/meteor-foam',\n    '/alanshaw/stylist', '/meteor-velocity/velocity', '/0nn0/terminal-mac-cheatsheet',\n    '/bowlingjs/bowlingjs.github.io' ],\n  url: 'https://github.com/stars/iteles?direction=desc&page=2&sort=created',\n  next_page: 'https://github.com/stars/iteles?direction=desc&page=3&sort=created'\n}\n```\n\n### Repositories\n\nThe second tab on the personal profile page is \"Repositories\"\nthis is a **list** of the ***personal projects*** the person is working on, e.g: https://github.com/iteles?tab=repositories\n\n<img width=\"1033\" alt=\"github-ines-list-of-repositories\" src=\"https://cloud.githubusercontent.com/assets/194400/8909661/7e83e97e-347a-11e5-84c9-239f558a2b98.png\">\n\nWe crawl this page and return an array containing the repo properties:\n\n```js\nvar url = 'iteles?tab=repositories';\ngs(url, function(err, data) {\n  console.log(data);  // or what ever you want to do with the data\n})\n```\n\nsample output:\n\n```js\n{\n  entries: [\n    { url: '/iteles/learn-ab-and-multivariate-testing',\n      name: 'learn-ab-and-multivariate-testing',\n      lang: '',\n      desc: 'Tutorial on A/B and multivariate testing',\n      info: '',\n      stars: '4',\n      forks: '0',\n      updated: '2015-07-08T08:36:37Z' },\n    { url: '/iteles/learn-tdd',\n      name: 'learn-tdd',\n      lang: 'JavaScript',\n      desc: 'A brief introduction to Test Driven Development (TDD) in JavaScript',\n      info: 'forked from dwyl/learn-tdd',\n      stars: '0',\n      forks: '4',\n      updated: '2015-06-29T17:24:56Z' },\n    { url: '/iteles/practical-full-stack-testing',\n      name: 'practical-full-stack-testing',\n      lang: 'HTML',\n      desc: 'A fork of @nelsonic\\'s repo to allow for PRs',\n      info: 'forked from nelsonic/practical-js-tdd',\n      stars: '0',\n      forks: '36',\n      updated: '2015-06-06T14:40:43Z' },\n    { url: '/iteles/styling-for-accessibility',\n      name: 'styling-for-accessibility',\n      lang: '',\n      desc: 'A collection of \\'do\\'s and \\'don\\'t\\'s of CSS to ensure accessibility',\n      info: '',\n      stars: '0',\n      forks: '0',\n      updated: '2015-05-26T11:06:28Z' },\n    { url: '/iteles/Ultimate-guide-to-successful-meetups',\n      name: 'Ultimate-guide-to-successful-meetups',\n      lang: '',\n      desc: 'The ultimate guide to organizing successful meetups',\n      info: '',\n      stars: '3',\n      forks: '0',\n      updated: '2015-05-19T09:40:39Z' },\n    { url: '/iteles/Javascript-the-Good-Parts-notes',\n      name: 'Javascript-the-Good-Parts-notes',\n      lang: '',\n      desc: 'Notes on the seminal \"Javascript the Good Parts: byDouglas Crockford',\n      info: '',\n      stars: '41',\n      forks: '12',\n      updated: '2015-05-17T16:39:35Z' }  \n  ],\n  url: 'https://github.com/iteles?tab=repositories' }\n```\n\n\n### Activity feed\n\nEvery person on GitHub has an RSS feed for their recent activity;\nthis is the 3rd and final tab of the person's profile page.\n\nit can be viewed online by visiting:\n```sh\nhttps://github.com/{username}?tab=activity\n```\ne.g: [/iteles?tab=activity](https://github.com/iteles?tab=activity)\n\n\n#### Parsing the Feed\n\nThe activity feed is published as an [**.atom**](https://en.wikipedia.org/wiki/RSS)\nxml string which contains a list of entries.\n\nWe use [**xml2js**](https://www.npmjs.com/package/xml2js)\n(which in turn uses the [**sax**](https://www.npmjs.com/package/sax) xml parser) to parse the xml stream. This results in a object similar to the following example:\n\n```js\n{ '$':\n   { xmlns: 'http://www.w3.org/2005/Atom',\n     'xmlns:media': 'http://search.yahoo.com/mrss/',\n     'xml:lang': 'en-US' },\n  id: [ 'tag:github.com,2008:/iteles' ],\n  link: [ { '$': [Object] }, { '$': [Object] } ],\n  title: [ 'iteles’s Activity' ],\n  updated: [ '2015-07-22T23:31:25Z' ],\n  entry:\n   [ { id: [Object],\n       published: [Object],\n       updated: [Object],\n       link: [Object],\n       title: [Object],\n       author: [Object],\n       'media:thumbnail': [Object],\n       content: [Object] },\n     { id: [Object],\n       published: [Object],\n       updated: [Object],\n       link: [Object],\n       title: [Object],\n       author: [Object],\n       'media:thumbnail': [Object],\n       content: [Object] }\n    ]\n}\n```\nEach call to the atom feed returns the latest 30 enties.\nWe're showing 2 here for illustration (_so you get the idea..._)\n\nFrom this we _extract_ only the relevant info:\n\n```sh\n'2015-07-22T12:33:14Z alanshaw pushed to master at alanshaw/david-www',\n'2015-07-22T12:33:14Z alanshaw created tag v9.4.3 at alanshaw/david-www',\n'2015-07-22T09:23:28Z alanshaw closed issue tableflip/i18n-browserify#6',\n'2015-07-21T17:08:19Z alanshaw commented on issue alanshaw/david#71',\n'2015-07-21T08:24:13Z alanshaw pushed to master at tableflip/score-board',\n'2015-07-20T17:49:59Z alanshaw deleted branch refactor-corp-events at tableflip/sow-api-client',\n'2015-07-20T17:49:58Z alanshaw pushed to master at tableflip/sow-api-client',\n'2015-07-20T17:49:58Z alanshaw merged pull request tableflip/sow-api-client#2',\n'2015-07-20T17:49:54Z alanshaw opened pull request tableflip/sow-api-client#2',\n'2015-07-18T07:30:36Z alanshaw closed issue alanshaw/md-tokenizer#1',\n'2015-07-18T07:30:36Z alanshaw commented on issue alanshaw/md-tokenizer#1',\n```\nInstead of _wasting_ (_what will be **Giga**_) ***Bytes*** of space with key:value pairs by storing the entries as JSON, we are storing the activity feed entries as strings in an array.\nEach item in the array can be broken down into:\n```sh\n{date-time} {username} {action} {link}\n```\n\nAs we can see from this there are several event types:\n\n+ **pushed to master** at\n+ **created tag** v9.4.3 at\n+ **opened issue**\n+ **commented on issue**\n+ **closed issue**\n+ **deleted branch**\n+ **opened pull request**\n+ **merged pull request**\n+ **starred** username/repo-name\n\nFor now we are *not* going to parse the event types, we are simply going to store them in our list for later analysis.\n\nWe have a good pointer when its time to start interpreting the data:\nhttps://developer.github.com/v3/activity/events/types/\n\nOne thing worth noting is that RSS feed is ***Not Real-Time*** ...\nsadly, it only gets updated periodically so we cannot rely on it to\nhave the *latest* info.\n\n\n### Organization\n\nOrganization pages have the following url pattern: `https://github.com/{orgname}`  \nexample: [https://github.com/**dwyl**](https://github.com/dwyl)\n\n```js\nvar url = 'dwyl';\ngs(url, function(err, data) {\n  console.log(data); // or do something way more interesting with the data!\n});\n```\n\nsample data (`entries` _truncated for brevity_):\n```js\n{\n  entries:\n   [ { name: 'hapi-auth-jwt2',\n       desc: 'Secure Hapi.js authentication plugin using JSON Web Tokens (JWT)',\n       updated: '2015-08-04T19:30:50Z',\n       lang: 'JavaScript',\n       stars: '59',\n       forks: '11' },\n     { name: 'start-here',\n       desc: 'A Quick-start Guide for People who want to DWYL',\n       updated: '2015-08-03T11:04:14Z',\n       lang: 'HTML',\n       stars: '14',\n       forks: '9' },\n     { name: 'summer-2015',\n       desc: 'Probably the best Summer Sun, Fun & Coding Experience in the World!',\n       updated: '2015-07-31T11:02:29Z',\n       lang: 'CSS',\n       stars: '16',\n       forks: '1' },\n  ],\n  website: 'http://dwyl.io',\n  url: 'https://github.com/dwyl',\n  name: 'dwyl - do what you love',\n  desc: 'Start here: https://github.com/dwyl/start-here',\n  location: 'Your Pocket',\n  email: 'github@dwyl.io',\n  pcount: 24,\n  avatar: 'https://avatars3.githubusercontent.com/u/11708465?v=3&s=200',\n  next_page: '/dwyl?page=2'\n}\n```\nNote #1: *sadly*, this has the ***identical*** url format to *Profile*\nthis gets handled by the `switcher` which infers what is an org vs. profile page\nby checking for an known element on the page.\n\nNote #2: when an organization has *multiple pages* of repositories you will see a `next_page`\nkey/value in the `data` e.g: [/dwyl?**page=2**](/dwyl?page=2) (for the second page of repos)\n\n\n### Repository Stats\n\nThis is where things start getting interesting ...\n\n![github-repo-page](https://cloud.githubusercontent.com/assets/194400/8930109/d8a76ab8-3522-11e5-8e07-95596a889fde.png)\n\nexample: https://github.com/nelsonic/adoro\n\n```js\nvar url = 'nelsonic/adoro';\ngs(url, function(err, data) {\n  console.log(data); // or do something way more interesting with the data!\n});\n```\n\nsample data:\n\n```js\n{\n  url: 'https://github.com/nelsonic/adoro',\n  desc: 'The little publishing tool you\\'ll love using. [work-in-progress]',\n  website: 'http://www.dwyl.io/',\n  watchers: 3,\n  stars: 8,\n  forks: 1,\n  commits: 12,\n  branches: 1,\n  releases: 1,\n  langs: [ 'JavaScript 90.7%', 'CSS 9.3%' ]\n}\n```\n\n> Annoyingly the number of issues and pull requests, contributors and issues\n are only rendered *after* the page has loaded (via XHR) so we do not get\n these three stats on page load.\n\n\n ### 7. Issues\n\n Clicking on the issues icon/link in any repository takes us to the list of all the issues.\n\n Visiting a project with more than a page worth of issues has pagination at the bottom of the page:\n\n ![tudo-issues-list-showing-pagination](https://cloud.githubusercontent.com/assets/194400/8942419/27b9446a-356d-11e5-84f9-5de2eaae506b.png)\n\n Which has a link to: https://github.com/dwyl/tudo/issues?page=2&q=is%3Aissue+is%3Aopen\n\n ![tudo-issues-second-page](https://cloud.githubusercontent.com/assets/194400/8942423/33bf0a2e-356d-11e5-82b8-1bd142fb2302.png)\n\n List of issues for a repository:\n\n ```js\n var gs  = require('github-scraper');\n var url = '/dwyl/tudo/issues';\n gs(url, function (err, data) {\n   console.log(data); // use the data how ever you like\n });\n ```\n\n sample output:\n\n ```sh\n { entries:\n    [\n      {\n        url: '/dwyl/tudo/issues/46',\n        title: 'discuss components',\n        created: '2015-07-21T15:34:22Z',\n        author: 'benjaminlees',\n        comments: 3,\n        assignee: 'izaakrogan',\n        milestone: 'I don\\'t know what I\\'m doing',\n        labels: [ 'enhancement', 'help wanted', 'question' ]\n      },\n      {\n        url: '/dwyl/tudo/issues/45',\n        title: 'Create riot components from HTML structure files',\n        created: '2015-07-21T15:24:58Z',\n        author: 'msmichellegar',\n        comments: 2,\n        assignee: 'msmichellegar',\n        labels: [ 'question' ]\n      }\n   ], // truncated for brevity\n   open: 30,\n   closed: 20,\n   next: '/dwyl/tudo/issues?page=2&q=is%3Aissue+is%3Aopen',\n   url: '/dwyl/tudo/issues'\n }\n ```\n\n Each issue in the list would create a entry in the crawler (worker) queue:\n\n ```sh\n 2015-07-22T12:33:14Z issue /dwyl/tudo/issues/77\n ```\n\n > Should we include the \"all issues by this author\" link?\n + **created_by** https://github.com/dwyl/tudo/issues/created_by/iteles\n + **assignee** (assigned to): https://github.com/dwyl/tudo/issues?q=assignee%3Aiteles+is%3Aopen\n\n\n ### Issue (_individual_)\n\n The result of scraping https://github.com/dwyl/tudo/issues/51\n\n ```js\n var gs  = require('github-scraper');\n var url = '/dwyl/tudo/issues/51';\n gs(url, function (err, data) {\n   console.log(data); // use the data how ever you like\n });\n ```\n\n sample output:\n\n ```js\n { entries:\n    [ { id: 'issue-96442793',\n        author: 'nelsonic',\n        created: '2015-07-22T00:00:45Z',\n        body: 'instead of waiting for people to perform the steps to authorise Tudo (to access their GitHub orgs/issues we could request their GitHub username on the login page and initiate the retrieval of their issues while they are authenticating... That way, by the time they get back to Tudo their issues dashboard is already pre-rendered and loaded! This is a wow-factor people won\\'t be expecting and thus our app immediately delivers on our first promise!\\n\\nThoughts?' },\n      { id: 'issuecomment-123807796',\n        author: 'iteles',\n        created: '2015-07-22T17:54:12Z',\n        body: 'I\\'d love to test this out, this will be an amazing selling point if we can get the performance to work like we expect!' },\n      { id: 'issuecomment-124048121',\n        author: 'nelsonic',\n        created: '2015-07-23T10:20:15Z',\n        body: '@iteles have you watched the Foundation Episode featuring Kevin Systrom (instagram) ?\\n\\n\\nhttps://www.youtube.com/watch?v=nld8B9l1aRE\\n\\n\\nWhat were the USPs that contributed to instagram\\'s success (considering how many photo-related-apps were in the app store at the time) ?\\n\\ncc: @besarthoxhaj' },\n      { id: 'issuecomment-124075792',\n        author: 'besarthoxhaj',\n        created: '2015-07-23T11:59:31Z',\n        body: '@nelsonic love the idea! Let\\'s do it!' } ],\n   labels: [ 'enhancement', 'help wanted', 'question' ],\n   participants: [ 'nelsonic', 'iteles', 'besarthoxhaj' ],\n   url: '/dwyl/tudo/issues/51',\n   title: 'Pre-fetch people\\'s issues while they are authenticating with GitHub',\n   state: 'Open',\n   author: 'nelsonic',\n   created: '2015-07-22T00:00:45Z',\n   milestone: 'Minimal Usable Product',\n   assignee: 'besarthoxhaj' }\n ```\n\n By contrast using the GitHub API to fetch this issue\n see: https://developer.github.com/v3/issues/#get-a-single-issue\n\n format:\n ```sh\n /repos/:owner/:repo/issues/:number\n ```\n\n ```sh\n curl https://api.github.com/repos/dwyl/tudo/issues/51\n ```\n\n ### Milestones\n\n Milestones are used to group issues into logical units.\n\n ![dwyl-tudo-milestones](https://cloud.githubusercontent.com/assets/194400/9010055/b3e4da72-379c-11e5-8fd3-680bf928a389.png)\n\n ```js\n var gs  = require('github-scraper');\n var url = '/dwyl/tudo/milestones';\n gs(url, function (err, data) {\n   console.log(data); // use the data how ever you like\n });\n ```\n\nSample output:\n\n ```js\n { entries:\n    [ { name: 'Test Milestone - Please Don\\'t Close!',\n        due: 'Past due by 16 days',\n        updated: 'Last updated 5 days ago',\n        desc: 'This Milestone in used in our e2e tests to check for an over-due milestone, so please don\\'t close it!',\n        progress: '0%',\n        open: 1,\n        closed: 0 },\n      { name: 'Minimal Usable Product',\n        due: 'Due by July  5, 2016',\n        updated: 'Last updated 2 days ago',\n        desc: 'What is the absolute minimum we can do to deliver value to people using the app?\\n(and thus make them want to come back and use it!)',\n        progress: '0%',\n        open: 5,\n        closed: 0 } ],\n   url: 'https://github.com/dwyl/tudo/milestones',\n   open: 2,\n   closed: 1 }\n ```\n\n ### Labels (for a repository)\n\n All repositories have a set of standard labels (built-in to GitHub)\n e.g: https://github.com/dwyl/tudo/labels is (_currently_) only using the \"*standard*\" labels.\n\n <img width=\"998\" alt=\"github-dwyl-tudo-labels-list\" src=\"https://cloud.githubusercontent.com/assets/194400/8945752/36c87754-3582-11e5-9a46-a4a786ca7c25.png\">\n\n Whereas the RethinkDB (which uses GitHub for all their project tracking) uses _several **custom labels**_:\n https://github.com/rethinkdb/rethinkdb/labels\n\n <img width=\"996\" alt=\"github-rethinkdb-issues-list\" src=\"https://cloud.githubusercontent.com/assets/194400/8945786/7b98b718-3582-11e5-961b-905d268dd39a.png\">\n\n We need to crawl these for each repo.\n\n```js\nvar gs  = require('github-scraper');\nvar url = '/dwyl/time/labels';\ngs(url, function (err, data) {\n  console.log(data); // use the data how ever you like\n});\n```\n\n Here's the extraction of the standard labels:\n ```js\n [\n   { name: 'bug',\n     style: 'background-color: #fc2929; color: #fff;',\n     link: '/dwyl/tudo/labels/bug',\n     count: 3 },\n   { name: 'duplicate',\n     style: 'background-color: #cccccc; color: #333333;',\n     link: '/dwyl/tudo/labels/duplicate',\n     count: 0 },\n   { name: 'enhancement',\n     style: 'background-color: #84b6eb; color: #1c2733;',\n     link: '/dwyl/tudo/labels/enhancement',\n     count: 11 },\n   { name: 'help wanted',\n     style: 'background-color: #159818; color: #fff;',\n     link: '/dwyl/tudo/labels/help%20wanted',\n     count: 21 },\n   { name: 'invalid',\n     style: 'background-color: #e6e6e6; color: #333333;',\n     link: '/dwyl/tudo/labels/invalid',\n     count: 1 },\n   { name: 'question',\n     style: 'background-color: #cc317c; color: #fff;',\n     link: '/dwyl/tudo/labels/question',\n     count: 10 }\n ]\n ```\n\n or a repo that has ***custom labels***:\n\n ```js\n { entries:\n   [ { name: '[alpha]',\n       style: 'background-color: #79CDCD; color: #1e3333;',\n       link: '/dwyl/time/labels/%5Balpha%5D',\n       count: 2 },\n     { name: 'API',\n       style: 'background-color: #006b75; color: #fff;',\n       link: '/dwyl/time/labels/API',\n       count: 11 },\n     { name: 'bug',\n       style: 'background-color: #fc2929; color: #fff;',\n       link: '/dwyl/time/labels/bug',\n       count: 5 },\n     { name: 'chore',\n       style: 'background-color: #e11d21; color: #fff;',\n       link: '/dwyl/time/labels/chore',\n       count: 9 },\n     { name: 'discuss',\n       style: 'background-color: #bfe5bf; color: #2a332a;',\n       link: '/dwyl/time/labels/discuss',\n       count: 43 },\n     { name: 'Documentation',\n       style: 'background-color: #eb6420; color: #fff;',\n       link: '/dwyl/time/labels/Documentation',\n       count: 2 },\n     { name: 'duplicate',\n       style: 'background-color: #cccccc; color: #333333;',\n       link: '/dwyl/time/labels/duplicate',\n       count: 0 },\n     { name: 'enhancement',\n       style: 'background-color: #84b6eb; color: #1c2733;',\n       link: '/dwyl/time/labels/enhancement',\n       count: 27 },\n     { name: 'external dependency',\n       style: 'background-color: #D1EEEE; color: #2c3333;',\n       link: '/dwyl/time/labels/external%20dependency',\n       count: 1 },\n     { name: 'FrontEnd',\n       style: 'background-color: #f7c6c7; color: #332829;',\n       link: '/dwyl/time/labels/FrontEnd',\n       count: 26 },\n     { name: 'help wanted',\n       style: 'background-color: #009800; color: #fff;',\n       link: '/dwyl/time/labels/help%20wanted',\n       count: 42 },\n     { name: 'invalid',\n       style: 'background-color: #e6e6e6; color: #333333;',\n       link: '/dwyl/time/labels/invalid',\n       count: 0 },\n     { name: 'investigate',\n       style: 'background-color: #fbca04; color: #332900;',\n       link: '/dwyl/time/labels/investigate',\n       count: 18 },\n     { name: 'MVP',\n       style: 'background-color: #207de5; color: #fff;',\n       link: '/dwyl/time/labels/MVP',\n       count: 27 },\n     { name: 'NiceToHave',\n       style: 'background-color: #fbca04; color: #332900;',\n       link: '/dwyl/time/labels/NiceToHave',\n       count: 7 },\n     { name: 'Post MVP',\n       style: 'background-color: #fef2c0; color: #333026;',\n       link: '/dwyl/time/labels/Post%20MVP',\n       count: 24 },\n     { name: 'question',\n       style: 'background-color: #cc317c; color: #fff;',\n       link: '/dwyl/time/labels/question',\n       count: 25 },\n     { name: 'UI',\n       style: 'background-color: #bfdadc; color: #2c3233;',\n       link: '/dwyl/time/labels/UI',\n       count: 13 } ],\n  url: 'https://github.com/dwyl/time/labels' }\n ```\n\n ### Issues > *Search* (*Bonus Feature*)\n\n A ***much*** more *effective* way of collating all the issues relevant to a person is to search for them!\n\n example:\n  https://github.com/search?type=Issues&q=author%3Aiteles&state=open&o=desc&s=created\n\n ```js\n {\n   entries:\n    [\n      { title: 'Remove flexbox from CSS',\n        url: '/dwyl/dwyl.github.io/issues/29',\n        desc: 'To ensure the site works across all devices, particularly Kindle/e-readers.',\n        author: 'iteles',\n        created: '2015-07-25T22:57:20Z',\n        comments: 2 },\n      { title: 'CSS | Add indentation back into main.css (disappeared from master)',\n        url: '/dwyl/tudo/issues/77',\n        desc: 'All indentation has been removed from main.css in the latest commit.     \\n\\nThis needs to be put back in as originally written by @msmichellegar and @iteles.',\n        author: 'iteles',\n        created: '2015-07-25T16:27:59Z' },\n      { title: 'CSS | Investigate styling of issue label colours',\n        url: '/dwyl/tudo/issues/72',\n        desc: 'Labels can be given any colour so there is no predictable set that we can code into the CSS file.\\n\\nWe need to investigate what the best way to ensure we can provide the right colour of background to the ...',\n        author: 'iteles',\n        created: '2015-07-23T17:49:02Z',\n        comments: 4 }\n   ],\n   next: '/search?o=desc&p=2&q=author%3Aiteles&s=created&state=open&type=Issues'\n }\n ```\n\n\n #### Owner\n\n For the issues created across all their *personal* repositories\n use a search query of the form:\n ```sh\n https://github.com/search?q=user%3A{username|org}\n &state={state}\n &type=Issues&s={relevance}\n &o={order}\n ```\n e.g:\n https://github.com/search?q=user%3Aiteles&state=open&type=Issues&s=updated&o=asc\n\n #### Author (_created by_)\n\n Or to find ***all*** the issues where the person is the ***author***\n use a query of the following format:\n\n ```sh\n https://github.com/search?q=author%3A{username|org}\n &state={state}\n &type=Issues&s={relevance}\n &o={order}\n ```\n\n #### Assignee (_issues assigned to this person_)\n\n Or to find ***all*** the issues *assigned* to the person use a query of the following format:\n\n ```sh\n https://github.com/search?q=assignee%3A{username|org}\n &state={state}\n &type=Issues&s={relevance}\n &o={order}\n &s={filter}\n ```\n\n #### Mentions\n\n We can use a ***mentions*** (search) query to discover all the\n issues where a given person (_username_) was mentioned:\n\n ```sh\n https://github.com/search?q=mentions%3A{username}&type=Issues&state={state}\n ```\n\n e.g: https://github.com/search?q=mentions%3Aiteles&type=Issues&state=open\n\n This _could_ be more than the issues in the person's (_own_) repos *or* the repos the person has access to (_via org_). e.g:\n if [_Sally_](http://www.imdb.com/title/tt1483013/quotes?item=qt1905812)\n   axks a clarifying question on a project she has not yet contributed to,\n   the issue will not appear when we crawl the repos on her profile or orgs she has access to ...\n\n #### Issues Filters\n\n There are *many* filters we can use to find issues, here are a few:\n\n + **created** https://github.com/search?q=author%3Aiteles&s=created&type=Issues&o=desc&state=open\n + **updated**: https://github.com/search?q=author%3Aiteles&s=updated&type=Issues&o=desc&state=open\n + **date range**: https://github.com/dwyl/time/issues?q=is%3Aissue+is%3Aopen+updated%3A%3C2015-06-28\n\n ##### Further Reading on Searching+Filters\n\n For *way* more details on searching & filters see:\n\n + https://help.github.com/articles/searching-issues/\n + https://help.github.com/articles/searching-github/#types-of-searches\n + https://help.github.com/articles/search-syntax/\n\n\n\n\n## Want More Examples?\n\nIf you want ***even more*** examples of the pages you can scrape,\ntake a look at our end-to-end tests where we *test* all the scrapers!\n\n<br />\n\n## Future Features / Road Map ?\n\n\n### Crawl the List of commits\n\nWould it be interesting to see/track:\n+ **who** makes the most commits to the project\n+ **when** (***what time*** of day/night) people do their work\n+ **what** did the person contribute? (docs, code improvement, tests, typo, dependency update?)\n\nShow your interest in this feature: https://github.com/nelsonic/github-scraper/issues/17\n\n\n<br />\n\n## tl;dr\n\nIf you are the kind of person that likes to *understand* how something works,\nthis is *your* section.\n\n### Inferring Which Scraper to use from the URL\n\n`lib/switcher.js` handles inference.\nWe wanted to use a `switch > case` construct but, ended up using `if/else`\nbecause there are two types of checks we need to do so `if/else` seemed simpler.\n\n\n## Interesting Facts\n\n- GitHub has 10.3 Million users (_at last count_)\n- yet the most followed person [Linus Torvalds](https://github.com/torvalds)\n\"_only_\" has **28k followers** (_so its a **highly distributed network**_ )\n+ https://www.githubarchive.org/ attempts to archive all of GitHub\n+ http://octoboard.com/ shows stats for the past 24h\n\n\n## Research\n\n> Must read up about http://en.wikipedia.org/wiki/Inverted_index\n> so I understand how to use: https://www.npmjs.org/package/level-inverted-index\n\n- GitHub stats (node module): https://github.com/apiengine/ghstats\n(no tests or recent work/activity, but interesting functionality)\n\n- Hard Drive reliability stats:\nhttps://www.backblaze.com/blog/hard-drive-reliability-update-september-2014\n(useful when selecting which drives to use in the storage array -\n  Clear Winner is Hitachi 3TB)\n- RAID explained in layman's terms:\nhttp://uk.pcmag.com/storage-devices-reviews/7917/feature/raid-levels-explained\n- RAID Calculator:\nhttps://www.synology.com/en-global/support/RAID_calculator\n(if you don't already know how much space you get)\n- SQLite limits: https://www.sqlite.org/limits.html\n\n## Useful Links\n\n- Summary of ***Most Active*** GitHub users: http://git.io/top\n- Intro to web-scraping with cheerio:\nhttps://www.digitalocean.com/community/tutorials/how-to-use-node-js-request-and-cheerio-to-set-up-simple-web-scraping\n- GitHub background info: http://en.wikipedia.org/wiki/GitHub\n+ GitHub Event Types:\nhttps://developer.github.com/v3/activity/events/types/\n\n### GitHub Stats API\n\n- Github Stats API: https://developer.github.com/v3/repos/statistics/\n- GitHub Followers API: https://developer.github.com/v3/users/followers/\n\nExample:\n\n```sh\ncurl -v https://api.github.com/users/pgte/followers\n```\n\n```js\n[\n  {\n    \"login\": \"methodmissing\",\n    \"id\": 379,\n    \"avatar_url\": \"https://avatars.githubusercontent.com/u/379?v=2\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/methodmissing\",\n    \"html_url\": \"https://github.com/methodmissing\",\n    \"followers_url\": \"https://api.github.com/users/methodmissing/followers\",\n    \"following_url\": \"https://api.github.com/users/methodmissing/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/methodmissing/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/methodmissing/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/methodmissing/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/methodmissing/orgs\",\n    \"repos_url\": \"https://api.github.com/users/methodmissing/repos\",\n    \"events_url\": \"https://api.github.com/users/methodmissing/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/methodmissing/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n\netc...]\n```\n\n#### Issues (with using the) GitHub API:\n\n- The API only returns 30 results per query.\n- **X-RateLimit-Limit**: **60** (can only make 60 requests per hour) ...\n1440 queries per day (60 per hour x 24 hours) sounds like *ample* on the surface.\nBut, if we assume the average person has at least 2 pages worth of followers (30<)\nit means on a single instance/server we can only track 720 people.\nNot really enough to do any sort of trend analysis. :disappointed:\nIf we are tracking people with hundreds of followers (and *growing fast*)\ne.g. 300< followers. the number of users we can track comes down to\n1440 / 10 = 140 people...\n(10 requests to fetch complete list of followers) we burn through 1440 requests\npretty quickly.\n- There's no guarantee which order the followers will be in\n(e.g. most recent first?)\n- **Results** are ***Cached*** so they are not-real time like they are in the\nWeb. (seems daft, but its true.) Ideally they would have a ***Streaming API***\nbut sadly, [GitHub is built in Ruby-on-Rails](http://builtwith.com/github.com)\nwhich is \"RESTful\" (not real-time).\n\n#### *But*...\n\nOnce we know _who_ we *should* be following, we can use\n\n- https://developer.github.com/v3/users/followers/#follow-a-user\n- https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another\n\ne.g:\n```sh\ncurl -v https://api.github.com/users/pgte/following/visionmedia\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "ee2487ab662fa545e513d8553e0f4b99da20e8cb",
  "_id": "github-scraper@3.0.21",
  "_shasum": "f2662a3cda671a6b73cfec51898264b436f9c548",
  "_from": "github-scraper@*"
}
